The PYTHON plan

I want to be able to do the following in the game:

(in C++ code)
Game starts
Game calls OnLoad()
OnLoad loads up a python script called level1.py and runs OnLoad()

(in Python)
OnLoad starts
ShowText("hey fools!")

(C++ code invoked by ShowText)
ShowText("hey fools")    // in C++

(back in python)
Done.

(C++)
Done loading.



How we're going to do it is like so:

----
SWIG
----

1) Define a C++ API to be exposed to Python (like ShowText() etc.)
python_stuff.cpp
swig_stuff.i

2) Use swig to generate a wrapper for that API
Makes more .cpp files that are a PYTHON EXTENSION

Note: normally python extensions are external libs.  In our case,
we don't need them to be external, so we:

3) Stick the generated SWIG Python wrappers INTO the project.
Compile regular stuff + Python API + generated Python API wrappers into
final .EXE file.

That takes care of creating the python extensions and calling C++ from python.

---------------
EMBEDDED PYTHON
---------------

NOW. This is a totally seperate thing from above.  We want python scripts
to be able to call that C++ API and we want our C++ code to call certain
python scripts.  We only want this to happen from inside the engine, and
we don't want external python scripts to be able to do stuff in the game.

SO what we do is this:

1) Embed python - The game BECOMES a python interpreter

An example:  The game wants to run a function in a python script when
the player hits a lightswitch:

// This is C++ code in the game engine
LightSwitch::OnActivate() {
 run_python("level1.py", "lightswitch1_activate");
}

Now, the function lightswitch1_activate in the python script level1.py
is run.

However, this is just a regular old python script, so it knows NOTHING
about the game.  How can it do things?  It will have to know about
our game engine's Python API by IMPORTING it.

So level1.py does this:

import ninjas-engine

When that happens, the python extenions we COMPILED into the engine (see
the section on SWIG) now become available to this script.

Neat huh?

Now that our extension is loaded, we can do the stuff we want in python:

---------------------
level1.py full text:
---------------------

import ninjas-engine

def lightswitch1_activate():
	ret_val = ninjas-engine.ShowTextYesNo(
							"The switch is now on! Do you want to look around some more?"
						)

	if (ret_val == "yes") 
		ninjas-engine.ShowText("OH GOD, you were eaten by a grue!")
	else
		ninjas-engine.ShowText("Good choice!")

---------------------

Neat huh?

I just hope I know what the HELL I'm talking about, I've never written
ANYTHING in python in my life, let alone interfaced it to C++ in a cross
platform application.

I hope this runs on MacOSx : )
