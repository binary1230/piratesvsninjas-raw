AC_INIT(src/main.cpp)
AC_PREFIX_DEFAULT(/usr/local/)

VERSION_MAJOR="0"
VERSION_MINOR="1"
VERSION_FIX="0"
VERSION_EXTRA="-pre-alpha"
PACKAGE_NAME="keymania"

VERSION="$VERSION_MAJOR.$VERSION_MINOR.$VERSION_FIX$VERSION_EXTRA"

# Test for GCC and version
GccVersion=0
PrecompileEnable="yes"

AC_PROG_AWK
AC_PROG_CXX
AC_PROG_CC
AC_PROG_INSTALL

dnl ----------------------------------------------------------
dnl Authoheader multiple #ifdef hackaround
dnl the stuff here will go at the top of config.h
dnl ----------------------------------------------------------
AH_TOP([
// hack for stdint.h check
#ifdef HAVE_STDINT_H
#undef HAVE_STDINT_H
#endif // HAVE_STDINT_H
])


dnl ------------------------------------
dnl Precompiled header support
dnl ------------------------------------

AC_MSG_CHECKING([Compiler])
if test $ac_compiler_gnu = "yes"; then
	GccVersion=`$CXX -v 2>&1 | $AWK '{ if ($2 ~ /version/) print $3 }'`
	GccVersion=`echo $GccVersion | $AWK 'BEGIN { FS = "."; } { printf "% d", ($1 * 1000 + $2) * 1000 + $3;}'`

	if test -n "$GccVersion" && test "$GccVersion" -ge 3004000; then
		AC_MSG_RESULT([gcc >= 3.4.0, PreCompiled headers enabled])
		WARN_FLAGS="$WARNFLAGS $WARN_FLAGS34"
		OPT_FLAGS="$OPT_FLAGS $OPT_FLAGS34"
		PrecompileEnable="yes"
	else
		AC_MSG_RESULT([gcc < 3.4.0, PreCompiled headers disabled])
		PrecompileEnable="no"
	fi
else
	AC_MSG_RESULT([non-gcc, PreCompiled headers disabled])
	PrecompileEnable="no"
fi

AC_LANG(C++)

dnl --------------------------------
dnl ./configure command line options
dnl --------------------------------
AC_ARG_WITH([extra-includes], AC_HELP_STRING([--with-extra-includes=DIR],[Add extra include paths]),
  use_extra_includes="$withval",
  use_extra_includes=NO
)
if test -n "$use_extra_includes" && test "$use_extra_includes" != "NO"; then
  for dir in $use_extra_includes; do
    extra_includes="$extra_includes -I$dir"
  done
fi

AC_ARG_WITH([extra-libs], AC_HELP_STRING([--with-extra-libs=DIR],[Add extra library paths]), 
  use_extra_libs="$withval",
  use_extra_libs=NO
)
if test -n "$use_extra_libs" && test "$use_extra_libs" != "NO"; then
   for dir in $use_extra_libs; do
     extra_libraries="$extra_libraries -L$dir"
   done
fi

CXXFLAGS="$CXXFLAGS $extra_includes"
CFLAGS="$CFLAGS $extra_includes"
LDFLAGS="$LDFLAGS $extra_libraries"

dnl AC_ARG_WITH(ogg,
dnl [  --with-ogg=DIR         Set where the Ogg library is located]) 
dnl AC_ARG_WITH(vorbis,
dnl [   --with-vorbis=DIR      Set where the Vorbis library is located])

DEBUG=1
RELEASE=0

dnl Debug or release version of the game
AC_MSG_CHECKING([Debug/release build])
AC_ARG_ENABLE([release-build], AC_HELP_STRING([--enable-release-build],[Make a release build]),
  RELEASE=1,
  RELEASE=0
)

if test "$RELEASE" == "1"; then
	DEBUG=0
	AC_DEFINE([RELEASE], [], [Defined if this is a release build])
	AC_MSG_RESULT([Enabling RELEASE build])
	if test "$CXXFLAGS" != ""; then
		CXXFLAGS="-O2"
		CFLAGS="-O2"
	fi
else
	DEBUG=1
	AC_DEFINE([DEBUG], [], [Defined if this is a debug build])
	AC_MSG_RESULT([Enabling DEBUG build])
fi

AM_CONDITIONAL(DEBUG, [test "$DEBUG" = "1"])
AM_CONDITIONAL(RELEASE, [test "$RELEASE" = "1"])

dnl --------------------------------
dnl Test for subversion presence
dnl if so, include the revision number
dnl --------------------------------
if test -e ".svn" && test "$RELEASE" != "1"; then
	AC_PATH_PROG(WHICH_SVN, svn, no)
	if test "$WHICH_SVN" != "no"; then
		SVN_VERSION=`svn info | grep Revision | cut -f2 -d ' '`
		VERSION="$VERSION-svn$SVN_VERSION"
		AC_DEFINE([SUBVERSION_BUILD], [], [Defined if we are building from subversion])
	fi
fi

dnl ----------------------------------------------------------------
dnl Test if we're running on Mac, if we are, we need a tiny bit
dnl of MAC carbon code for the package.  
dnl
dnl NEEDS FIXING - 'uname -s' tests the platform we are RUNNING on,
dnl  NOT the platform we are building for.  Most of the time these are
dnl  the same, but during cross compiles they are not.
dnl
dnl For example, cross compiling from Mac->Linux would currently make
dnl our script think that we are building FOR MacOSX.
dnl ----------------------------------------------------------------
AC_PATH_PROG(WHICH_UNAME, uname, no)
if test "$WHICH_UNAME"; then
	OUR_PLATFORM=`uname -s`
	if test "$OUR_PLATFORM" = "Darwin"; then
		AC_DEFINE([PLATFORM_DARWIN], [], [Defined if building for Darwin])
	fi
fi

AM_INIT_AUTOMAKE(${PACKAGE_NAME}, ${VERSION})

dnl --------------------
dnl Cross compile stuff
dnl --------------------
case $target_alias in
	*mingw*)
		WIN32="yes"
	;;
	*)
		WIN32="no"
	;;
esac

if test "$WIN32" = "yes"; then
	AC_MSG_RESULT([Building for Win32])
	dnl you can try editing these 2 lines if cross compile stuff isn't working
	dnl DON'T FORGET to re-run ./autogen.sh when you are done editing here
	dnl also, double check your cross-configure.sh
	ALLEGRO_LIBS="`allegro-config --libs --static` -lmingw32 -lwsock32 -luser32 -lgdi32"
	CFLAGS="$CFLAGS -mwindows"
	CXXFLAGS="$CXXFLAGS -mwindows"
else
	AC_MSG_RESULT([Not building for Win32])
	ALLEGRO_LIBS="`allegro-config --libs`"
fi

AM_CONDITIONAL([WIN32], [test $WIN32 = "yes"])

dnl ------------------------------------------------
dnl X11 stuff (Unix ONLY) Needed for OpenGL stuff.
dnl ------------------------------------------------

LIBS="-lm $LIBS"

AC_PATH_X

if test "$WIN32" = "no"; then
	
	if test -n "$x_includes"; then
	  CPPFLAGS="-I$x_includes $CPPFLAGS"
	fi
	if test -n "$x_libraries"; then
 	 LDFLAGS="-L$x_libraries $LDFLAGS"
	fi
	LIBS="-lXext -lX11 $LIBS"

	dnl Test for VidMode extension
	AC_CHECK_LIB(Xxf86vm, XF86VidModeQueryExtension,
	LIBS="-lXxf86vm $LIBS",	,
	) 

dnl Is any of this dynamic linking stuff needed??

dnl Check if the dynamic loading library (libdl.so) is available
dnl	AH_TEMPLATE([ALLEGROGL_HAVE_DYNAMIC_LINK], [Define if dynamic linking is supported.])

dnl  AC_CHECK_HEADER(dlfcn.h,
dnl    AC_CHECK_LIB(dl, dlsym,
dnl      LIBS="-ldl $LIBS"
dnl      AC_DEFINE(ALLEGROGL_HAVE_DYNAMIC_LINK),
dnl      fail_dl=y
dnl    )
dnl  )

fi # win32 stuff

dnl ------------------------------------------------
dnl Check for OpenGL stuff
dnl Set OPENGL_LIBS
dnl ------------------------------------------------

dnl - GL stuff

AC_CHECK_HEADER(GL/gl.h, , gl_fail=y)
if test "$WIN32" = "no"; then
	AC_CHECK_HEADER(GL/glx.h, , gl_fail=y)
fi

if test -n "$gl_fail"; then
	AC_MSG_ERROR([Unable to locate required OpenGL headers])
fi

if test "$WIN32" = "no"; then
	AC_CHECK_LIB(GL, glBegin, LIBS="-lGL $LIBS", gl_fail=y, "-lGL")
else
	dnl XXX change 'main' back to 'glBegin'.  WHY main??
	dnl everyone else uses 'main' and I can't get any _actual_
	dnl GL functions to work.  this will probably always 
	dnl be TRUE.
	AC_CHECK_LIB(opengl32, main, LIBS="-lopengl32 $LIBS", gl_fail=y, "-lopengl32")
fi

if test -n "$gl_fail"; then
	AC_MSG_ERROR([Unable to locate required OpenGL libraries])
fi

dnl - GLU stuff

AC_CHECK_HEADER(GL/glu.h, , fail_glu=y)

if test -n "$fail_glu"; then
	AC_MSG_ERROR([Unable to locate required GLU headers])
fi

if test "$WIN32" = "no"; then
	AC_CHECK_LIB(GLU, gluSphere, LIBS="-lGLU $LIBS", fail_glu=y, -lGLU)
else
	dnl XXX change 'main' back to 'gluSphere'.  WHY main??
	dnl everyone else uses 'main' and I can't get any _actual_
	dnl GL functions to work.  this will probably always 
	dnl be TRUE.
	AC_CHECK_LIB(glu32, main, LIBS="-lglu32 $LIBS", fail_glu=y, -lglu32)
fi

if test -n "$fail_glu"; then
	AC_MSG_ERROR([Unable to locate required GLU libraries])
fi

dnl ------------------------------------------------
dnl Check for alleggl stuff
dnl ------------------------------------------------

LIBS="$ALLEGRO_LIBS $LIBS"

AC_CHECK_HEADER(alleggl.h, , alleggl_fail=y)

if test -n "$alleggl_fail"; then
	AC_MSG_ERROR([Unable to locate required AllegroGL headers])
fi

if test "$WIN32" = "no"; then
	AC_CHECK_LIB(agl, install_allegro_gl, LIBS="-lagl $LIBS $ALLEGRO_LIBS", alleggl_fail=y, $ALLERGRO_LIBS)
else
	dnl XXX change 'main' back to 'gluSphere'.  WHY main??
	dnl everyone else uses 'main' and I can't get any _actual_
	dnl GL functions to work.  this will probably always 
	dnl be TRUE.
	AC_CHECK_LIB(agl, main, LIBS="-lagl $LIBS $ALLEGRO_LIBS", alleggl_fail=y, $ALLERGRO_LIBS)
fi

if test -n "$alleggl_fail"; then
	AC_MSG_ERROR([Unable to locate required AllegroGL library])
fi


dnl ------------------------------------------------
dnl Check for FreeType2
dnl define FT2_CFLAGS and FT2_LIBS.
dnl ------------------------------------------------

dnl FT2=no

dnl AC_CHECK_FT2([9.5.3], 
dnl				FT2="yes",
dnl				AC_MSG_RESULT(libfreetype2 check Failed: Disabling FreeType2 support)
dnl )


dnl ------------------------------------------------
dnl Check for ogg
dnl sets $OGG_CFLAGS and $OGG_LIBS on success
dnl ------------------------------------------------

OGG=no

XIPH_PATH_OGG(
				OGG="yes",
				AC_MSG_RESULT(libogg check Failed: Disabling OggVorbis support)
)

dnl ------------------------------------------------
dnl Check for vorbis
dnl sets $VORBIS_CFLAGS and $VORBIS_LIBS on success
dnl ------------------------------------------------

VORBIS=no

XIPH_PATH_VORBIS(
				VORBIS="yes" VORBIS_LIBS="$VORBISFILE_LIBS $VORBIS_LIBS",
				AC_MSG_RESULT(libvorbis check Failed: Disabling OggVorbis support)
        VORBIS="no"
)

dnl ---------------------------
dnl Combined ogg/vorbis support
dnl ---------------------------

dnl Both must work to enable it
if test x$VORBIS = xyes && test x$OGG = xyes; then
	ogg_music="enabled"
else
	ogg_music="disabled"
fi

if test x$ogg_music = xenabled; then
   AC_CHECK_HEADERS([vorbis/vorbisfile.h])

	 dnl The ORDER of OGGVORBIS_LIBS matters
	 OGGVORBIS_LIBS="$VORBIS_LIBS $OGG_LIBS"
	 OGGVORBIS_CFLAGS="$OGG_CLFAGS $VORBIS_CLFAGS"
fi 

AM_CONDITIONAL(HAVE_OGG_VORBIS, test x$ogg_music = xenabled)

dnl -------------------------
dnl Check for libpng
dnl -------------------------
AC_CHECK_HEADERS([png.h])
AC_MSG_CHECKING(libpng)
AC_TRY_COMPILE([#include <png.h>], 
[png_structp png_ptr;], 
LIBPNG='-lpng'; echo yes;
AC_DEFINE(HAVE_PNG_H), LIBPNG=''; echo no)

dnl -------------------------
dnl Check for zlib
dnl -------------------------
AC_CHECK_HEADERS([zlib.h])
AC_CHECK_LIB(z, deflate, ZLIB='-lz';AC_DEFINE(HAVE_ZLIB_H),ZLIB='')

dnl --------------------------
dnl Check for various things
dnl --------------------------
AC_CHECK_HEADERS([allegro.h])
AC_CHECK_HEADERS([vector])
AC_CHECK_HEADERS([list])

dnl -----------------
dnl Set it all up
dnl -----------------

AM_CONDITIONAL(PRECOMPILE_ENABLE, [test "$PrecompileEnable" = "yes"])

CXXFLAGS="$CXXFLAGS -Wall $extra_includes $OGGVORBIS_CFLAGS -Iexternal -Iobjects"

dnl keep this SEPERATE even though here it is identical
PRECOMPILED_CXXFLAGS="$CXXFLAGS"

if test x$PrecompileEnable = xyes; then
CXXFLAGS="$CXXFLAGS -include precompiled.h"
fi

LDFLAGS="$LDFLAGS $extra_libraries"

LDFLAGS="$extra_libraries $LDFLAGS"
LIBS="$LIBS $OGGVORBIS_LIBS $LIBPNG	$ZLIB"

AC_SUBST(PACKAGE_NAME)
AC_SUBST(PRECOMPILED_CXXFLAGS)

AC_SUBST(extra_libraries)

dnl DOES NOT WORK RIGHT NOW
DATA_DIR="${prefix}/data"
AC_DEFINE_UNQUOTED([DATA_DIR], "${DATA_DIR}", [The installer prefix e.g. /usr/local])

if test x$PrecompileEnable = xyes; then
	AC_DEFINE([PRECOMPILE_ENABLE], "1", [Whether we are precompiling or not])
fi

AC_SUBST(OGGVORBIS_CFLAGS)
AC_SUBST(OGGVORBIS_LIBS)
dnl AC_SUBST(OGG_DEFS)

AM_CONFIG_HEADER(config.h)

AC_OBJEXT
AC_EXEEXT

AC_OUTPUT(Makefile src/Makefile)
