
TODO for more generic demo support:
* move demo code from input class into GameBase for generic 
  recording of arbitrary variables. 
* move frame counter of of input class into GameState
* create ID's for each object on screen	

It'll look something like this:

inside any demo recording object (a.k.a. the player):

SomeObject::Init() {
  // set initial positions and stuff
  SetDemoVar("pos_x", pos.x);
  ...
  // etc.
}

SomeObject::Update() { 
  if (playingback) {
    acceleration.x = GetDemoVar("acceleration_x");
  } else if (recording) {
    acceleration.x = GetNewAcceleration();
    SetDemoVar("acceleration_x", acceleration.x);
  }
}

GameBase just wraps GetDemoVar() with calls to GameState::GetDemoVar()

struct demovar {
 val val;
 string id;
}

val Demo::GetDemoVar(string id) {
  struct demovar dv = Lookup(id);
  return dv.val;
}

val Demo::SetDemoVar(string id, val v) {
  struct demovar dv = Lookup(id);
  if (v != dv.val) {
    // need to update with the new value
    dv.val = v;
    WriteDemoVar(dv);
  } else {
    // don't write if it has the same value as before.
  }
}

// private
val Demo::WriteDemoVar(demovar dv) {
  // print to file:
  // current_frame_num, dv.id, dv.val
}
