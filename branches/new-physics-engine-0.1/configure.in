dnl CROSS COMPILING - if you are looking in here to mess with cross
dnl compiling stuff, scroll down to where it says XXXX CROSS COMPILING
dnl see BUILD or the Wiki for more info

dnl LARGE PARTS of this configure.in stolen from Clanlib configure.ac

AC_INIT(src/main.cpp)

VERSION_MAJOR="0"
VERSION_MINOR="2"
VERSION_FIX="0"
VERSION_EXTRA="-beta1"

VERSION="$VERSION_MAJOR.$VERSION_MINOR.$VERSION_FIX$VERSION_EXTRA"

AC_PROG_CXX
AC_PROG_CC
AC_PROG_INSTALL

AC_LANG(C++)

AM_PATH_CPPUNIT(1.9.6)
dnl XXX todo:

dnl Test for subversion presence, if so, use the subversion revision number
if test -e ".svn"; then
	AC_PATH_PROG(WHICH_SVN, svn, no)
	if test "$WHICH_SVN" != "no"; then
		SVN_VERSION=`svn info | grep Revision | cut -f2 -d ' '`
		VERSION="$VERSION-svn$SVN_VERSION"
		AC_DEFINE([SUBVERSION_BUILD], [], [Defined if we are building from subversion])
	fi
fi

dnl Test if we're running on Mac, if we are, we need a tiny bit
dnl of MAC carbon code for the package.  
dnl
dnl NEEDS FIXING - 'uname -s' tests the platform we are RUNNING on,
dnl  NOT the platform we are building for.  Most of the time these are
dnl  the same, but during cross compiles they are not.
dnl
dnl For example, cross compiling from Mac->Linux would currently make
dnl our script think that we are building FOR MacOSX.

AC_PATH_PROG(WHICH_UNAME, uname, no)
if test "$WHICH_UNAME"; then
	OUR_PLATFORM=`uname -s`
	if test "$OUR_PLATFORM" = "Darwin"; then
		AC_DEFINE([PLATFORM_DARWIN], [], [Defined if building for Darwin])
	fi
fi

AM_INIT_AUTOMAKE([ninja-engine], ${VERSION})

case $target_alias in
	*mingw*)
		WIN32="yes"
	;;
	*)
		WIN32="no"
	;;
esac

# ninjas_LDFLAGS="$LDFLAGS `allegro-config --libs`"
LIBS="$LIBS `allegro-config --libs`"

dnl XXXX CROSS COMPILING
if test "$WIN32" = "yes"; then
	dnl you can try editing these 2 lines if cross compile stuff isn't working
	dnl DON'T FORGET to re-run ./autogen.sh when you are done editing here
	dnl also, double check your cross-configure.sh
	LIBS="$LDFLAGS -lalleg -lmingw32"
	ninjas_CFLAGS="-mwindows"
fi
dnl END CROSS COMPILING WEIRDNESS

AM_CONDITIONAL([WIN32], [test $WIN32 = "yes"])

dnl ----------------------------------------
dnl Additional include and library paths:
dnl ----------------------------------------

AC_ARG_WITH([extra-includes], AC_HELP_STRING([--with-extra-includes=DIR],[Add extra include paths]),
  use_extra_includes="$withval",
  use_extra_includes=NO
)
if test -n "$use_extra_includes" && test "$use_extra_includes" != "NO"; then
  for dir in $use_extra_includes; do
    extra_includes="$extra_includes -I$dir"
  done
fi

# CXXFLAGS="$CXXFLAGS $extra_includes"

AC_ARG_WITH([extra-libs], AC_HELP_STRING([--with-extra-libs=DIR],[Add extra library paths]), 
  use_extra_libs="$withval",
  use_extra_libs=NO
)
if test -n "$use_extra_libs" && test "$use_extra_libs" != "NO"; then
   for dir in $use_extra_libs; do
     extra_libraries="$extra_libraries -L$dir"
   done
fi

ninjas_CXXFLAGS="$ninjas_CXXFLAGS $extra_includes"
ninjas_LDFLGAS="$ninjas_LDFLAGS $extra_libraries"

LDFLAGS="$extra_libraries"

AC_SUBST(ninjas_CXXFLAGS)
AC_SUBST(ninjas_LDFLAGS)

# LIBS="$extra_libraries"
# CFLAGS="$CXXFLAGS"

# AC_SUBST(LDFLAGS)

# AC_SUBST(extra_includes)
AC_SUBST(extra_libraries)

dnl AC_SUBST(libs)
dnl AC_SUBST(LIBS)

dnl ------------------------------------------------------

AM_CONFIG_HEADER(config.h)

AC_OBJEXT
AC_EXEEXT

AC_CHECK_HEADERS([allegro.h])

#AC_SUBST(SDL_LIBS)
#AC_SUBST(SDL_DEFS)

# These are the files which we create based on the info in THIS file.
AC_OUTPUT(Makefile src/Makefile src/Doxyfile src/tests/Makefile)
